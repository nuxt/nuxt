import type { NitroApp } from 'nitropack/types'
// @ts-expect-error : we are importing from the virtual file system
import contentSecurityPolicyConfig from '#content-security-policy'
import type { ContentSecurityPolicyConfig, ContentSecurityPolicyValue } from '../../../types'

/**
 * This plugin updates the CSP directives with the nonce and hashes generated by the server.
 */
export default (nitroApp: NitroApp) => {
  const cspConfig = contentSecurityPolicyConfig as ContentSecurityPolicyConfig

  nitroApp.hooks.hook('render:html', (_, { event }) => {
    if (cspConfig && cspConfig.value) {
      const config = cspConfig

      if (config.value) {
        const csp = config.value
        const nonce = event.context.security?.nonce
        const scriptHashes = event.context.security?.hashes?.script
        const styleHashes = event.context.security?.hashes?.style
        config.value = updateCspVariables(csp, nonce, scriptHashes, styleHashes)
      }
    }
  })
}

function updateCspVariables (csp: ContentSecurityPolicyValue, nonce?: string, scriptHashes?: Set<string>, styleHashes?: Set<string>) {
  const generatedCsp = <ContentSecurityPolicyValue>Object.fromEntries(Object.entries(csp).map(([directive, value]) => {
    // Return boolean values unchanged
    if (typeof value === 'boolean') {
      return [directive, value]
    }
    // Make sure nonce placeholders are eliminated
    const sources = (typeof value === 'string') ? value.split(' ').map(token => token.trim()).filter(token => token) : value
    const modifiedSources = sources
      .filter((source) => {
        if (source.startsWith('\'nonce-') && source !== '\'nonce-{{nonce}}\'') {
          return false
        }
        return true
      })
      .map((source) => {
        if (source === '\'nonce-{{nonce}}\'') {
          return nonce ? `'nonce-${nonce}'` : ''
        } else {
          return source
        }
      })
      .filter(source => source)

    if (directive === 'script-src' && scriptHashes) {
      modifiedSources.push(...scriptHashes)
    }
    if (directive === 'style-src' && styleHashes) {
      modifiedSources.push(...styleHashes)
    }

    return [directive, modifiedSources]
  }))
  return generatedCsp
}
